{"version":3,"sources":["Quiz.js","App.js","serviceWorker.js","index.js"],"names":["questions","text","choices","answer","Quiz1","React","useState","index","activeQuestion","className","id","map","c","i","key","onClick","answerIndex","console","log","Nav","href","type","placeholder","aria-label","App","Quiz","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OA4BIA,EAAY,CA1BP,CACPC,KACE,kPACFC,QAAS,CACP,qCACA,8BACA,qDACA,qCAEFC,OAAQ,sDAED,CACPF,KAAM,qEACNC,QAAS,CAAC,gBAAiB,eAAgB,SAAU,cACrDC,OAAQ,cAED,CACPF,KAAM,kDACNC,QAAS,CACP,2BACA,qBACA,wBACA,wBAEFC,OAAQ,uBAmDKC,EA1CD,WAAO,IAAD,EACQC,IAAMC,SAAS,GADvB,mBACXC,EADW,aAE8BF,IAAMC,SAAS,IAF7C,mBAGZE,GAHY,UAGKR,EAAUO,IAMjC,OACE,yBAAKE,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eAAf,QACA,yBAAKA,UAAU,aACb,wBAAIC,GAAG,WAAWD,UAAU,cACzBD,EAAeP,MAElB,6BACA,yBAAKS,GAAG,WACLF,EAAeN,QAAQS,KAAI,SAACC,EAAGC,GAC9B,OACE,4BACEC,IAAKF,EACLH,UAAU,kBACVM,QAAS,kBArBPC,EAqB0BH,OApB9CI,QAAQC,IAAI,gBAAiBF,GADV,IAACA,IAuBF,8BAAOJ,SAMjB,yBAAKF,GAAG,WAAWD,UAAU,qBC/DnCU,EAAM,WACV,OACE,yBAAKV,UAAU,8BACb,uBAAGA,UAAU,eAAeW,KAAK,MAC/B,wBAAIX,UAAU,eAAd,mBAEF,0BAAMA,UAAU,eACd,2BACEA,UAAU,uBACVY,KAAK,SACLC,YAAY,kBACZC,aAAW,WAEb,4BAAQd,UAAU,uCAAuCY,KAAK,UAA9D,aAiBOG,MATf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAACgB,EAAD,QCnBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.99a498bd.chunk.js","sourcesContent":["import React from \"react\";\n\nvar q1 = {\n  text:\n    \" We'll start with what might be the most important Greek word in terms of philosophy: Lógos. This word appears in general Greek culture, but also in specific philosohical authors and systems, from Heraclitus to Plato. What does it mean?\",\n  choices: [\n    \"Knowledge, science, art, technique\",\n    \"Symbol, icon, figure, image\",\n    \"Word, rational thinking, speech, discourse, treaty\",\n    \" Being, existence, reality, truth\",\n  ],\n  answer: \"Word, rational thinking, speech, discourse, treaty\",\n};\nvar q2 = {\n  text: \" Sophós is an adjective; who was a sophós in ancient Greece?\",\n  choices: [\"A philosopher\", \"A politician\", \"A poet\", \"A wise man\"],\n  answer: \"A wise man\",\n};\nvar q3 = {\n  text: \"And finally, do you know what philosophy means?\",\n  choices: [\n    \"The possession of wisdom\",\n    \"The love of wisdom\",\n    \"The search for wisdom\",\n    \"The desire of wisdom\",\n  ],\n  answer: \"The love of Wisdom\",\n};\nvar questions = [q1, q2, q3];\n//   q1.checkAnswer(\"Word, rational thinking, speech, discourse, treaty\")\n// );\n\n// Start Quiz\n//var quiz = new Quiz(questions);\n\nconst Quiz1 = () => {\n  const [index, setIndex] = React.useState(0); // active question index\n  const [rightAnswerCount, setRightAnswerCount] = React.useState(0);\n  const activeQuestion = questions[index];\n\n  const handleAnswer = (answerIndex) => {\n    console.log(\"handle answer\", answerIndex);\n  };\n\n  return (\n    <div className=\"container mt-2\">\n      <div className=\"row\">\n        <div className=\"col-12 mt-5\">\n          <div className=\"card\">\n            <div className=\"card-header\">Quiz</div>\n            <div className=\"card-body\">\n              <h5 id=\"question\" className=\"card-title\">\n                {activeQuestion.text}\n              </h5>\n              <hr />\n              <div id=\"buttons\">\n                {activeQuestion.choices.map((c, i) => {\n                  return (\n                    <button\n                      key={c}\n                      className=\"btn btn-primary\"\n                      onClick={() => handleAnswer(i)}\n                    >\n                      <span>{c}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n            <div id=\"progress\" className=\"card-footer\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Quiz1;\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Quiz from \"./Quiz\";\n\nconst Nav = () => {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"./\">\n        <h2 className=\"font-italic\">Etymology quiz</h2>\n      </a>\n      <form className=\"form-inline\">\n        <input\n          className=\"form-control mr-sm-2\"\n          type=\"search\"\n          placeholder=\"Search words...\"\n          aria-label=\"Search\"\n        />\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">\n          Search\n        </button>\n      </form>\n    </nav>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}